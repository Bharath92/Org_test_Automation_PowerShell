pipelines:
  - name: pipeline_S_PS_UTIL_4075_001
    steps:
      - name: S_PS_UTIL_4075_001_1
        type: PowerShell
        configuration:
          nodePool: win_2019
        execution:
          onExecute:
            - New-Item -Path ".\" -Name "testResults" -ItemType Directory
            - Set-Content -Path "testResults\total.xml" -Value "<?xml version=`"1.0`" encoding=`"UTF-8`"?><testsuite name=`"myTestSuite`" tests=`"5`" errors=`"2`" failures=`"1`" skip=`"1`"><testcase classname=`"test.One`" name=`"test`" time=`"1`"></testcase><testcase classname=`"test.Two`" name=`"test`" time=`"2`"><error message=`"test.Error`" type=`"ErrorType`">myError</error></testcase><testcase classname=`"test.Three`" name=`"test`" time=`"0`"><skipped/></testcase><testcase classname=`"test.Four`" name=`"test`" time=`"3`"><failure type=`"exceptions.AssertionError`" message=`"True is not false`">My failure message</failure></testcase><testcase classname=`"test.Five`" name=`"test`" time=`"1`"><error message=`"test.Error`" type=`"ErrorType`">mySecondError</error></testcase></testsuite>"
            - save_tests testResults

      - name: S_PS_UTIL_4075_001_2
        type: PowerShell
        configuration:
          nodePool: win_2019
          inputSteps:
            - name: S_PS_UTIL_4075_001_1
        execution:
          onExecute:
            - |
              $headers = @{}
              $headers['Authorization'] = "Bearer $builder_api_token"
              $steps = Invoke-RestMethod -Method Get -ContentType 'application/json' -Headers $headers -Uri "${pipelines_api_url}/steps?runIds=${run_id}&names=S_PS_UTIL_4075_001_1" -UseBasicParsing
              $stepId = $steps[0].id
              if ( -not $stepId ) { throw "Missing step ID" }
              $stepTestReports = Invoke-RestMethod -Method Get -ContentType 'application/json' -Headers $headers -Uri "${pipelines_api_url}/stepTestReports?stepIds=${stepId}" -UseBasicParsing
              $stepTestReport = $stepTestReports[0]
              if ( -not $stepTestReport ) { throw "Missing step test report" }
              if ( $stepTestReport.durationSeconds -ne 7 ) { throw "Wrong duration" }
              if ( $stepTestReport.totalTests -ne 5 ) { throw "Wrong totalTests" }
              if ( $stepTestReport.totalPassing -ne 1 ) { throw "Wrong totalPassing" }
              if ( $stepTestReport.totalFailures -ne 1 ) { throw "Wrong totalFailures" }
              if ( $stepTestReport.totalErrors -ne 2 ) { throw "Wrong totalErrors" }
              if ( $stepTestReport.totalSkipped -ne 1 ) { throw "Wrong totalSkipped" }
              if ( $stepTestReport.errorDetails.length -ne 2 ) { throw "Wrong number of errorDetails" }
              if ( $stepTestReport.failureDetails.length -ne 1 ) { throw "Wrong number of failureDetails" }
