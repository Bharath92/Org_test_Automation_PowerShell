resources:
  - name: S_PS_R_IMAGE_6106_002_Image
    type: Image
    configuration:
      registry: s_artifactory
      imageName: ${artifactory_registry_url}/test-automation-docker-local/s_ps_r_image_6106_002
      imageTag: ${run_id}
      autoPull: true

pipelines:
  - name: pipelines_S_PS_R_IMAGE_6106_002
    configuration:
      jfrogCliVersion: 2
    steps:
      - name: S_PS_R_IMAGE_6106_002_1
        type: PowerShell
        configuration:
          nodePool: win_2019
          affinityGroup: S_PS_R_IMAGE_6106_002
          integrations:
            - name: s_artifactory
          outputResources:
            - name: S_PS_R_IMAGE_6106_002_Image
        execution:
          onExecute:
            - |
              $artifactory_url = [System.Uri]$int_s_artifactory_url
              $artifactory_registry_host = $artifactory_url.Host
              $artifactory_registry_port = $artifactory_url.Port
              if ($artifactory_registry_port -eq 80) {
                add_run_variables artifactory_registry_url="${artifactory_registry_host}"
              } else {
                add_run_variables artifactory_registry_url="${artifactory_registry_host}:${artifactory_registry_port}"
              }
            - |
              Set-Content -Path Dockerfile -Value "FROM releases-docker.jfrog.io/jfrog/pipelines-w19dotnetcore:3.1"
              $imageName = "${artifactory_registry_url}/test-automation-docker-local/s_ps_r_image_6106_002"
              $imageTag = "${run_id}"
              docker build --rm=true -t ${imageName}:${imageTag} .
              jfrog docker push ${imageName}:${imageTag}
              docker rmi ${imageName}:${imageTag}

      - name: S_PS_R_IMAGE_6106_002_2
        type: PowerShell
        configuration:
          nodePool: win_2019
          affinityGroup: S_PS_R_IMAGE_6106_002
          inputResources:
            - name: S_PS_R_IMAGE_6106_002_Image
        execution:
          onExecute:
            - |
              $imageName = find_resource_variable S_PS_R_IMAGE_6106_002_Image imageName
              $imageTag = find_resource_variable S_PS_R_IMAGE_6106_002_Image imageTag
              $image = docker images -q ${imageName}:${imageTag}
              if (-not $image) { throw "Image not found" }
