template: true
valuesFilePath: ../values/gitRepoValues.yml

resources:
  - name: S_PS_DockerPush_8307_002_GitRepo
    type: GitRepo
    configuration:
      gitProvider: s_gitHub
      path: {{ .Values.GitHub.Org_test_Automation_PowerShell.path }}
      branches:
        include: {{gitBranch}}

  - name: S_PS_DockerPush_8307_002_BuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory: s_artifactory

pipelines:
  - name: pipeline_S_PS_DockerPush_8307_002
    configuration:
      jfrogCliVersion: 2
      nodePool: win_2019
    steps:
      - name: S_PS_DockerPush_8307_002_1
        type: DockerBuild
        configuration:
          affinityGroup: S_PS_DockerPush_8307_002
          dockerImageName: ${artifactory_registry_url}/test-automation-docker-local/s_ps_dockerpush_8307_2
          dockerImageTag: ${run_id}
          inputResources:
            - name: S_PS_DockerPush_8307_002_GitRepo
          integrations:
            - name: s_artifactory
        execution:
          onStart:
            - add_run_variables JFROG_CLI_BUILD_NUMBER=${run_id}
            - |
              $artifactory_url = [System.Uri]$int_s_artifactory_url
              $artifactory_registry_host = $artifactory_url.Host
              $artifactory_registry_port = $artifactory_url.Port
              if ($artifactory_registry_port -eq 80) {
                add_run_variables artifactory_registry_url="${artifactory_registry_host}"
              } else {
                add_run_variables artifactory_registry_url="${artifactory_registry_host}:${artifactory_registry_port}"
              }
            - cd $res_S_PS_DockerPush_8307_002_GitRepo_resourcePath
            - Set-Content -Path './Dockerfile' -Value 'FROM mcr.microsoft.com/windows/nanoserver:1809'

      - name: S_PS_DockerPush_8307_002_2
        type: DockerPush
        configuration:
          affinityGroup: S_PS_DockerPush_8307_002
          targetRepository: test-automation-docker-local
          autoPublishBuildInfo: true
          inputSteps:
            - name: S_PS_DockerPush_8307_002_1
          outputResources:
            - name: S_PS_DockerPush_8307_002_BuildInfo
          integrations:
            - name: s_artifactory

      - name: S_PS_DockerPush_8307_002_3
        type: PowerShell
        configuration:
          inputResources:
            - name: S_PS_DockerPush_8307_002_BuildInfo
          integrations:
            - name: s_artifactory
        execution:
          onExecute:
            - |
              $buildInfo = jfrog rt curl -XGET "/api/build/${JFROG_CLI_BUILD_NAME}/${run_id}" | ConvertFrom-Json
              $module = $buildInfo.buildInfo.modules | Where {$_.id -eq "s_ps_dockerpush_8307_2:${run_id}"}
              $artifact = $module.artifacts | Where {$_.name -eq "manifest.json"}
              Write-Output $artifact
              $artifactPath = $artifact.path
              $artifactSha = $artifact.sha256
              $headers = @{ 'Authorization' = "Bearer $builder_api_token" }
              $stepArtifact = Invoke-RestMethod -Method Get -ContentType 'application/json' -Headers $headers -Uri "${pipelines_api_url}/stepArtifacts?artifactPath=test-automation-docker-local/${artifactPath}&artifactSha=${artifactSha}&artifactType=artifact" -UseBasicParsing
              Write-Output $stepArtifact
              jfrog rt curl -XDELETE "/api/build/${JFROG_CLI_BUILD_NAME}?buildNumbers=${run_id}&artifacts=1"
              if ( $stepArtifact.artifactSha -ne $artifactSha ) { throw "SHA doesn't match" }
